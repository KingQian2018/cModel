import os
from posixpath import abspath
from urllib.error import ContentTooShortError

abs_path = os.path.dirname(os.path.abspath(__file__))
auto_file_c = abs_path+'/src/core/auto_generate.c'
auto_file_h = abs_path+'/src/core/auto_generate.h'

target_algo_path = abs_path+'/src/algo'

algo_files_c = []
algo_files_h = []

for root, dirs, files in os.walk(target_algo_path):
    for f in files:
        if '.c' in f:
            algo_files_c.append(target_algo_path+'/'+f)
        if '.h' in f:
            algo_files_h.append(f)

print(algo_files_c)

with open(auto_file_c, 'w', encoding='utf-8') as f:
    f.write("/** This file was automantically generated by auto_generate.py. DO NOT CHANGE IT!**/\n")
    f.write("#include \"auto_generate.h\"\n")
    
    f.write("\n")

    f.write("const Prase_Datas_s Prase_Datas[] = {\n")
    for c in algo_files_c:
        with open(c, 'r', encoding='utf-8') as ac:
            contents = ac.readlines()
        for cs in contents:
            if "_create(uint32_t id, uint32_t dt)" in cs:
                tags = cs.split(' ')[1]
                tags = tags.split('(')[0]
                tag = tags.split('_')[0]
                tag = str.upper(tag)
                f.write("\t{\""+tag+"\", "+tags+"},\n")
    f.write("};\n")
    f.write("\n")
    f.write("unsigned int Prase_Datas_len = sizeof(Prase_Datas)/sizeof(Prase_Datas[0]);\n")
    f.write("\n")
    pass

with open(auto_file_h, 'w', encoding='utf-8') as f:
    f.write("/** This file was automantically generated by auto_generate.py. DO NOT CHANGE IT!**/\n")
    f.write("#ifndef __AUTO_GENERATE_H\n")
    f.write("#define __AUTO_GENERATE_H\n")    
    f.write("\n")
    f.write("#include \"cmodel.h\"\n")
    
    f.write("\n")
    for h in algo_files_h:
        f.write("#include \""+h+"\"\n")
    f.write("\n")

    f.write("typedef struct _Prase_Datas_s {\n")
    f.write("\t const char* name;\n")
    f.write("\t CModel (*createCB)(uint32_t, uint32_t);\n")
    f.write("}Prase_Datas_s;\n")
    f.write("\n")

    f.write("extern const Prase_Datas_s Prase_Datas[];\n")
    f.write("extern unsigned int Prase_Datas_len;\n")
    f.write("\n")

    f.write("#endif\n")
    pass
